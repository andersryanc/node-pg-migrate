#!/usr/bin/env node

require('dotenv').load();
var assert = require('assert');
var fs = require('fs');
var path = require('path');
var util = require('util');
var optimist = require('optimist');
var Migration = require('../lib/migration');
var MigrationRunner = require('../lib/runner');

var pkginfo = require('pkginfo')(module, 'version');

process.on('uncaughtException', function(err) {
  console.log(err.stack);
  process.exit(1);
});

var argv = optimist
    .default({
      verbose: false,
      'force-exit': false,
      environment: 'dev',
      'migrations-dir': process.cwd() + '/migrations',
      'migrations-table': 'pgmigrations',
    })
    .usage('Usage: db-migrate [up|down|create] migrationName [options]')

    .describe('migrations-dir', 'The directory containing your migration files (default = `migrations`).')
    .alias('m', 'migrations-dir')
    .string('m')

    .describe('migrations-table', 'The table storing which migrations have been run (default = `pgmigrations`)')
    .alias('t', 'migrations-table')
    .string('t')

    .describe('environment', 'The environment you want to migrate. If `prod`, uses PROD_DB_URL env variable. If `test`, uses TEST_DB_URL env variable.')
    .alias('e', 'environment')
    .string('e')

    .describe('dry-run', "Prints the SQL but doesn't run it.")
    .boolean('dry-run')

    .describe('verbose', 'Verbose mode.')
    .alias('v', 'verbose')
    .boolean('v')

    .alias('h', 'help')
    .alias('h', '?')
    .boolean('h')

    .describe('version', 'Print version info.')
    .alias('i', 'version')
    .boolean('version')

    .argv;

if (argv.version) {
  console.log(module.exports.version);
  process.exit(0);
}

if (argv.help || argv._.length == 0) {
  optimist.showHelp();
  process.exit(1);
}

global.verbose = argv.verbose;
global.dryRun = argv['dry-run'];
if (global.dryRun) {
  console.log('dry run');
}

global.environment = argv.environment;
switch ( global.environment ) {
  case 'prod':
  case 'production':
    if ( typeof process.env.PROD_DB_URL === 'undefined' ) {
      console.log('PROD_DB_URL not specified in your environment.');
      process.exit(1);
    }
    DATABASE_URL = process.env.PROD_DB_URL;
    break;

  case 'test':
    if ( typeof process.env.TEST_DB_URL === 'undefined' ) {
      console.log('TEST_DB_URL not specified in your environment.');
      process.exit(1);
    }
    DATABASE_URL = process.env.TEST_DB_URL;
    break;

  case 'dev':
  case 'development':
    var DATABASE_URL = process.env.DATABASE_URL;
    break;

  default:
    console.log('Invalid --environment of "'+ global.environment +'" specified. Valid options are ["dev", "prod", "test"].');
    process.exit(1);
    break;
}

var MIGRATIONS_DIR = argv['migrations-dir'];
var MIGRATIONS_TABLE = argv['migrations-table'];

var action = argv._.shift();

if (action == 'create'){

  // replaces spaces with dashes - should help fix some errors
  var migration_name = argv._.length ? argv._.join('-') : '';
  // forces use of dashes in names - keep thing clean
  migration_name = migration_name.replace(/_ /g, '-');

  if (!migration_name){
    console.log("'migrationName' is required.");
    optimist.showHelp();
    process.exit(1);
  }

  var migration = Migration.create( migration_name, MIGRATIONS_DIR );
  console.log(util.format('Created migration -- %s', migration.path ));

} else if (action == 'up' || action == 'down'){

  var updown_arg = argv._.length ? argv._.shift() : null;
  var num_migrations;
  var migration_name;

  if ( updown_arg != null ){
    if ( parseInt(updown_arg) == updown_arg ){
      num_migrations = parseInt(updown_arg);
    } else {
      migration_name = argv._.join('-').replace(/_ /g, '-');
    }
  } else {
    if ( num_migrations === undefined ){
      if ( action == 'up' ) num_migrations = Infinity;
      if ( action == 'down' ) num_migrations = 1;
    }
  }

  var runner = new MigrationRunner({
    database_url: DATABASE_URL,
    dir: MIGRATIONS_DIR,
    migrations_table: MIGRATIONS_TABLE,
    direction: action,
    count: num_migrations,
    file: migration_name
  });

  runner.run(function(err){
    // finish -- show some logging about what happened?
    if (err){
      console.log(err.stack);
      process.exit(1);
    }
    console.log('Migrations complete!');
    process.exit(0);
  });
} else {
  console.log('Invalid Action: Must be [up|down|create].');
  optimist.showHelp();
  process.exit(1);
}

if (argv['force-exit']) {
  console.log("Forcing exit");
  process.exit(0);
}
